%YAML 1.2
---
name: PEPEAsm
file_extensions: [asm]
scope: pepeasm

variables:
  instructions: "MOV|SWAP|MOVBS|MOVB|USP|NEG|NOT|PUSH|POP|JMP|CALL|CALLF|ADD|ADDC|SUB|SUBB|DEC|INC|CMP|MUL|DIV|MOD|AND|OR|XOR|TEST|SHRA|SHLA|BIT|SET|CLR|CPL|SHR|SHL|ROR|ROL|RORC|ROLC|JZ|JEQ|JNZ|JNE|JN|JNN|JP|JNP|JC|JB|JNC|JAE|JV|JNV|JLT|JLE|JGT|JGE|JA|JBE|SWE|RET|RETF|RFE|NOP|PUSHC|POPC|EI|EI0|EI1|EI2|EI3|SETC|EDMA|DI|DI0|DI1|DI2|DI3|CLRC|DDMA|CPLC|WAIT|PROCESS|YIELD"
  registers: "R0|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10|R11|RL|R12|SP|R13|RE|R14|BTE|R15|TEMP|A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10|A11|A12|A13|A14|A15|RCN|RCCD|RCCI|RCMV|RTP|RPID"
  directives: "PLACE|EQU|TABLE|STACK|BYTE|STRING|WORD|LOCK"
  digit: "[0-9]"
  hexa: "[0-9a-fA-F]"
  letter: "[A-Za-z\u00C0-\u00FF]"
  identifier: "({{letter}}|\\_)({{letter}}|{{digit}}|\\_|\\$)*"
  operators: \(|\)|\*|/|%|\+|-|~|&|\^|\||\[|\]|\$

contexts:
  main:
    - match: ;
      scope: comment.pepeasm
      push: inside-comment

    - match: \"
      scope: string.pepeasm
      push: inside-string

    - match: CLINE
      scope: variable.function.pepeasm
      push: inside-comment

    - match: "{{identifier}}:"
      scope: keyword.operator.pepeasm

    - match: \b({{instructions}})\b
      scope: variable.function.pepeasm

    - match: "{{operators}}"
      scope: keyword.operator.pepeasm

    - match: \b({{directives}})\b
      scope: entity.name.function.pepeasm

    - match: \b({{registers}})\b
      scope: entity.name.function.pepeasm

    - match: \b({{digit}}{{hexa}}*(H|h))\b
      scope: constant.numeric.pepeasm
    - match: \b({{digit}}+(D|d))\b
      scope: constant.numeric.pepeasm
    - match: \b((0|1)+(B|b))\b
      scope: constant.numeric.pepeasm
    - match: \b{{digit}}+\b
      scope: constant.numeric.pepeasm

  inside-comment:
    - meta_scope: comment
    - match: \n
      pop: true

  inside-string:
    - meta_scope: string
    - meta_include_prototype: false
    - match: \"
      pop: 1
    - include: string-escape
    - match: \n
      scope: invalid
      pop: 1

  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["'\\/bfnrtav\?0]     # one of these characters
            |               # ...or...
            x               # a u
            [0-9a-fA-F]{2}  # and four hex digits
          )
        )
      scope: constant.character
    - match: \\.
      scope: invalid
